        -:    0:Source:src/aes.c
        -:    1:// FILE NAME  : aes.c
        -:    2:// AUTHOR     : Rafael Garibotti
        -:    3:// DEVELOPERS : Rafael Garibotti
        -:    4:// E-mail     : rafael.garibotti@pucrs.br
        -:    5://-----------------------------------------------------------------------------
        -:    6:// RELEASE HISTORY
        -:    7:// VERSION   DATE         DESCRIPTION
        -:    8:// 1.0       2021-06-08   Initial version.
        -:    9://-----------------------------------------------------------------------------
        -:   10:
        -:   11:#include "aes.h"
        -:   12:
        -:   13://-----------------------------------------------------------------------------
        -:   14:// AES (128/192/256)
        -:   15://-----------------------------------------------------------------------------
        -:   16:uint8_t
function getSBoxValue called 824 returned 100% blocks executed 100%
      824:   17:getSBoxValue(uint8_t num) {
      824:   18:  return sbox[num];
      824:   18-block  0
        -:   19:}
        -:   20:
        -:   21:uint8_t
function getSBoxInvert called 576 returned 100% blocks executed 100%
      576:   22:getSBoxInvert(uint8_t num) {
      576:   23:  return rsbox[num];
      576:   23-block  0
        -:   24:}
        -:   25:
        -:   26:// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
        -:   27:void
function KeyExpansion called 6 returned 100% blocks executed 100%
        6:   28:KeyExpansion(void) {
        -:   29:  uint8_t i, k;
        -:   30:  uint8_t tempa[4]; // Used for the column/row operations
        -:   31:
        -:   32:  // The first round key is the key itself.
       42:   33:  for(i = 0; i < Nk; ++i) {
        6:   33-block  0
       42:   33-block  1
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
       36:   34:    RoundKey[(i * 4) + 0] = ((Key[i] >> 24) & 0xFF);
       36:   35:    RoundKey[(i * 4) + 1] = ((Key[i] >> 16) & 0xFF);
       36:   36:    RoundKey[(i * 4) + 2] = ((Key[i] >>  8) & 0xFF);
       36:   37:    RoundKey[(i * 4) + 3] =  (Key[i]        & 0xFF);
       36:   37-block  0
        -:   38:  }
        -:   39:
        -:   40:  // All other round keys are found from the previous round keys.
        -:   41:  //i == Nk
      282:   42:  for(; i < Nb * (Nr + 1); ++i) {
        6:   42-block  0
      282:   42-block  1
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
      276:   43:    tempa[0] = RoundKey[(i-1) * 4 + 0];
      276:   44:    tempa[1] = RoundKey[(i-1) * 4 + 1];
      276:   45:    tempa[2] = RoundKey[(i-1) * 4 + 2];
      276:   46:    tempa[3] = RoundKey[(i-1) * 4 + 3];
        -:   47:
      276:   48:    if (i % Nk == 0) {
      276:   48-block  0
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        -:   49:    // This function shifts the 4 bytes in a word to the left once.
        -:   50:    // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]
        -:   51:
        -:   52:      // Function RotWord()
       50:   53:      k = tempa[0];
       50:   54:      tempa[0] = tempa[1];
       50:   55:      tempa[1] = tempa[2];
       50:   56:      tempa[2] = tempa[3];
       50:   57:      tempa[3] = k;
        -:   58:
        -:   59:      // SubWord() is a function that takes a four-byte input word and 
        -:   60:      // applies the S-box to each of the four bytes to produce an output word.
        -:   61:
        -:   62:      // Function Subword()
       50:   63:      tempa[0] = getSBoxValue(tempa[0]);
       50:   63-block  0
call    0 returned 100%
       50:   64:      tempa[1] = getSBoxValue(tempa[1]);
call    0 returned 100%
       50:   65:      tempa[2] = getSBoxValue(tempa[2]);
call    0 returned 100%
       50:   66:      tempa[3] = getSBoxValue(tempa[3]);
call    0 returned 100%
        -:   67:
       50:   68:      tempa[0] = tempa[0] ^ Rcon[i/Nk];
        -:   69:    }
        -:   70:
      276:   71:    if (Nk == 8) {
      276:   71-block  0
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
      104:   72:      if (i % Nk == 4) {
      104:   72-block  0
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -:   73:        // Function Subword()
       12:   74:        tempa[0] = getSBoxValue(tempa[0]);
       12:   74-block  0
call    0 returned 100%
       12:   75:        tempa[1] = getSBoxValue(tempa[1]);
call    0 returned 100%
       12:   76:        tempa[2] = getSBoxValue(tempa[2]);
call    0 returned 100%
       12:   77:        tempa[3] = getSBoxValue(tempa[3]);
call    0 returned 100%
        -:   78:      }
        -:   79:    }
      276:   80:    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
      276:   81:    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
      276:   82:    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
      276:   83:    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
      276:   83-block  0
        -:   84:  }
        6:   85:}
        -:   86:
        -:   87:// This function adds the round key to state.
        -:   88:// The round key is added to the state by an XOR function.
        -:   89:void
function AddRoundKey called 78 returned 100% blocks executed 100%
       78:   90:AddRoundKey(uint8_t round) {
        -:   91:  uint8_t i, j;
      390:   92:  for(i = 0; i < 4; ++i) {
       78:   92-block  0
      312:   92-block  1
      390:   92-block  2
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
     1560:   93:    for(j = 0; j < 4; ++j) {
      312:   93-block  0
     1560:   93-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
     1248:   94:      state[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
     1248:   94-block  0
        -:   95:    }
        -:   96:  }
       78:   97:}
        -:   98:
        -:   99:// The SubBytes Function Substitutes the values in the
        -:  100:// state matrix with values in an S-box.
        -:  101:void
function SubBytes called 36 returned 100% blocks executed 100%
       36:  102:SubBytes(void) {
        -:  103:  uint8_t i, j;
      180:  104:  for(i = 0; i < 4; ++i) {
       36:  104-block  0
      144:  104-block  1
      180:  104-block  2
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
      720:  105:    for(j = 0; j < 4; ++j) {
      144:  105-block  0
      720:  105-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
      576:  106:      state[j][i] = getSBoxValue(state[j][i]);
      576:  106-block  0
call    0 returned 100%
        -:  107:    }
        -:  108:  }
       36:  109:}
        -:  110:
        -:  111:// The ShiftRows() function shifts the rows in the state to the left.
        -:  112:// Each row is shifted with different offset.
        -:  113:// Offset = Row number. So the first row is not shifted.
        -:  114:void
function ShiftRows called 36 returned 100% blocks executed 100%
       36:  115:ShiftRows(void) {
        -:  116:  uint8_t temp;
        -:  117:
        -:  118:  // Rotate first row 1 columns to left  
       36:  119:  temp        = state[0][1];
       36:  120:  state[0][1] = state[1][1];
       36:  121:  state[1][1] = state[2][1];
       36:  122:  state[2][1] = state[3][1];
       36:  123:  state[3][1] = temp;
        -:  124:
        -:  125:  // Rotate second row 2 columns to left  
       36:  126:  temp        = state[0][2];
       36:  127:  state[0][2] = state[2][2];
       36:  128:  state[2][2] = temp;
        -:  129:
       36:  130:  temp        = state[1][2];
       36:  131:  state[1][2] = state[3][2];
       36:  132:  state[3][2] = temp;
        -:  133:
        -:  134:  // Rotate third row 3 columns to left
       36:  135:  temp        = state[0][3];
       36:  136:  state[0][3] = state[3][3];
       36:  137:  state[3][3] = state[2][3];
       36:  138:  state[2][3] = state[1][3];
       36:  139:  state[1][3] = temp;
       36:  140:}
        -:  141:
        -:  142:uint8_t
function xtime called 21648 returned 100% blocks executed 100%
    21648:  143:xtime(uint8_t x) {
    21648:  144:  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
    21648:  144-block  0
        -:  145:}
        -:  146:
        -:  147:// MixColumns function mixes the columns of the state matrix
        -:  148:void
function MixColumns called 33 returned 100% blocks executed 100%
       33:  149:MixColumns(void) {
        -:  150:  uint8_t i;
        -:  151:  //uint8_t Tmp; // GARIBA TESTAR
      165:  152:  for(i = 0; i < 4; ++i) {  
       33:  152-block  0
      165:  152-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
      132:  153:    uint8_t t   = state[i][0];
      132:  154:    uint8_t Tmp = state[i][0] ^ state[i][1] ^ state[i][2] ^ state[i][3] ;
      132:  155:    uint8_t Tm  = state[i][0] ^ state[i][1] ; Tm = xtime(Tm);  state[i][0] ^= Tm ^ Tmp ;
      132:  155-block  0
call    0 returned 100%
      132:  156:    Tm  = state[i][1] ^ state[i][2] ; Tm = xtime(Tm);  state[i][1] ^= Tm ^ Tmp ;
call    0 returned 100%
      132:  157:    Tm  = state[i][2] ^ state[i][3] ; Tm = xtime(Tm);  state[i][2] ^= Tm ^ Tmp ;
call    0 returned 100%
      132:  158:    Tm  = state[i][3] ^ t ;           Tm = xtime(Tm);  state[i][3] ^= Tm ^ Tmp ;
call    0 returned 100%
        -:  159:  }
       33:  160:}
        -:  161:
        -:  162:// Multiply is used to multiply numbers in the field GF(2^8)
        -:  163:uint8_t
function Multiply called 2112 returned 100% blocks executed 100%
     2112:  164:Multiply(uint8_t x, uint8_t y) {
     4224:  165:  return (((y & 1) * x) ^
     2112:  166:         ((y>>1 & 1) * xtime(x)) ^
     2112:  166-block  0
call    0 returned 100%
     2112:  167:         ((y>>2 & 1) * xtime(xtime(x))) ^
call    0 returned 100%
call    1 returned 100%
     4224:  168:         ((y>>3 & 1) * xtime(xtime(xtime(x)))) ^
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     2112:  169:         ((y>>4 & 1) * xtime(xtime(xtime(xtime(x))))));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  170:}
        -:  171:
        -:  172:// MixColumns function mixes the columns of the state matrix.
        -:  173:// The method used to multiply may be difficult to understand for the inexperienced.
        -:  174:// Please use the references to gain more information.
        -:  175:void
function InvMixColumns called 33 returned 100% blocks executed 100%
       33:  176:InvMixColumns(void) {
        -:  177:  uint8_t i;
      165:  178:  for(i = 0; i < 4; ++i) { 
       33:  178-block  0
      165:  178-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
      132:  179:    uint8_t a = state[i][0];
      132:  180:    uint8_t b = state[i][1];
      132:  181:    uint8_t c = state[i][2];
      132:  182:    uint8_t d = state[i][3];
        -:  183:
      132:  184:    state[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
      132:  184-block  0
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      132:  185:    state[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      132:  186:    state[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      132:  187:    state[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  188:  }
       33:  189:}
        -:  190:
        -:  191:// The SubBytes Function Substitutes the values in the
        -:  192:// state matrix with values in an S-box.
        -:  193:void
function InvSubBytes called 36 returned 100% blocks executed 100%
       36:  194:InvSubBytes(void) {
        -:  195:  uint8_t i, j;
      180:  196:  for(i = 0; i < 4; ++i) {
       36:  196-block  0
      144:  196-block  1
      180:  196-block  2
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
      720:  197:    for(j = 0; j < 4; ++j) {
      144:  197-block  0
      720:  197-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
      576:  198:      state[j][i] = getSBoxInvert(state[j][i]);
      576:  198-block  0
call    0 returned 100%
        -:  199:    }
        -:  200:  }
       36:  201:}
        -:  202:
        -:  203:void
function InvShiftRows called 36 returned 100% blocks executed 100%
       36:  204:InvShiftRows(void) {
        -:  205:  uint8_t temp;
        -:  206:
        -:  207:  // Rotate first row 1 columns to right  
       36:  208:  temp = state[3][1];
       36:  209:  state[3][1] = state[2][1];
       36:  210:  state[2][1] = state[1][1];
       36:  211:  state[1][1] = state[0][1];
       36:  212:  state[0][1] = temp;
        -:  213:
        -:  214:  // Rotate second row 2 columns to right 
       36:  215:  temp = state[0][2];
       36:  216:  state[0][2] = state[2][2];
       36:  217:  state[2][2] = temp;
        -:  218:
       36:  219:  temp = state[1][2];
       36:  220:  state[1][2] = state[3][2];
       36:  221:  state[3][2] = temp;
        -:  222:
        -:  223:  // Rotate third row 3 columns to right
       36:  224:  temp = state[0][3];
       36:  225:  state[0][3] = state[1][3];
       36:  226:  state[1][3] = state[2][3];
       36:  227:  state[2][3] = state[3][3];
       36:  228:  state[3][3] = temp;
       36:  229:}
        -:  230:
        -:  231:// AES encoder
        -:  232:void
function aes_enc called 3 returned 100% blocks executed 100%
        3:  233:aes_enc(void) {
        3:  234:  uint8_t round = 0;
        -:  235:
        -:  236:  // Add the First round key to the state before starting the rounds.
        3:  237:  AddRoundKey(0); 
        3:  237-block  0
call    0 returned 100%
        -:  238:
        -:  239:  // There will be Nr rounds.
        -:  240:  // The first Nr-1 rounds are identical.
        -:  241:  // These Nr-1 rounds are executed in the loop below.
       36:  242:  for(round = 1; round < Nr; ++round) {
       36:  242-block  0
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       33:  243:    SubBytes();
       33:  243-block  0
call    0 returned 100%
       33:  244:    ShiftRows();
call    0 returned 100%
       33:  245:    MixColumns();
call    0 returned 100%
       33:  246:    AddRoundKey(round);
call    0 returned 100%
        -:  247:  }
        -:  248:
        -:  249:  // The last round is given below.
        -:  250:  // The MixColumns function is not here in the last round.
        3:  251:  SubBytes();
        3:  251-block  0
call    0 returned 100%
        3:  252:  ShiftRows();
call    0 returned 100%
        3:  253:  AddRoundKey(Nr);
call    0 returned 100%
        3:  254:}
        -:  255:
        -:  256:// AES decoder
        -:  257:void
function aes_dec called 3 returned 100% blocks executed 100%
        3:  258:aes_dec(void) {
        3:  259:  uint8_t round = 0;
        -:  260:
        -:  261:  // Add the First round key to the state before starting the rounds.
        3:  262:  AddRoundKey(Nr); 
        3:  262-block  0
call    0 returned 100%
        -:  263:
        -:  264:  // There will be Nr rounds.
        -:  265:  // The first Nr-1 rounds are identical.
        -:  266:  // These Nr-1 rounds are executed in the loop below.
       36:  267:  for(round = Nr-1; round > 0; round--) {
       36:  267-block  0
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       33:  268:    InvShiftRows();
       33:  268-block  0
call    0 returned 100%
       33:  269:    InvSubBytes();
call    0 returned 100%
       33:  270:    AddRoundKey(round);
call    0 returned 100%
       33:  271:    InvMixColumns();
call    0 returned 100%
        -:  272:  }
        -:  273:
        -:  274:  // The last round is given below.
        -:  275:  // The MixColumns function is not here in the last round.
        3:  276:  InvShiftRows();
        3:  276-block  0
call    0 returned 100%
        3:  277:  InvSubBytes();
call    0 returned 100%
        3:  278:  AddRoundKey(0);
call    0 returned 100%
        3:  279:}
        -:  280:
        -:  281:// AES: ECB mode
        -:  282:void
function aes called 6 returned 100% blocks executed 100%
        6:  283:aes(uint32_t* key, uint32_t* input, uint8_t type, uint8_t enc_dec, uint32_t* output) {
        -:  284:  uint8_t i;
        -:  285:
        -:  286:  // Copy input to state
       30:  287:  for(i = 0; i < 4; i++) {
        6:  287-block  0
       30:  287-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       24:  288:    state[i][0] = ((input[i] >> 24) & 0xFF);
       24:  289:    state[i][1] = ((input[i] >> 16) & 0xFF);
       24:  290:    state[i][2] = ((input[i] >>  8) & 0xFF);
       24:  291:    state[i][3] =  (input[i]        & 0xFF);
       24:  291-block  0
        -:  292:  }
        -:  293:
        -:  294:  // Update some private variables
        6:  295:  switch (type) {
        6:  295-block  0
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 33%
        2:  296:    case 3  : Nk = 8; KEYLEN = 32; Nr = 14; break; // 256 bits
        2:  296-block  0
        2:  297:    case 2  : Nk = 6; KEYLEN = 24; Nr = 12; break; // 192 bits
        2:  297-block  0
        2:  298:    default : Nk = 4; KEYLEN = 16; Nr = 10; break; // 128 bits
        2:  298-block  0
        -:  299:  }
        -:  300:
        -:  301:  // The KeyExpansion routine must be called before encryption
        6:  302:  Key = key;
        6:  303:  KeyExpansion();
        6:  303-block  0
call    0 returned 100%
        -:  304:
        -:  305:  // The next function call encrypts the PlainText with the Key using AES algorithm
        6:  306:  if (enc_dec)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        3:  307:    aes_enc();
        3:  307-block  0
call    0 returned 100%
        -:  308:  else
        3:  309:    aes_dec();
        3:  309-block  0
call    0 returned 100%
        -:  310:
        -:  311:  // Copy state to output
       30:  312:  for(i = 0; i < 4; i++) {
        6:  312-block  0
       30:  312-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       24:  313:    output[i] = (state[i][0] << 24) + (state[i][1] << 16) + (state[i][2] << 8) + state[i][3];
       24:  313-block  0
        -:  314:  }
        6:  315:}
